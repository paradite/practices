function BinaryHeap(scoreFunction, idFunction, valueProp) {
  this.content = [];
  this.scoreFunction = scoreFunction;
  this.idFunction = idFunction;
  this.valueProp = valueProp;
  this.map = {};
}

BinaryHeap.prototype = {
  size: function () {
    return this.content.length;
  },

  push: function (elt) {
    if (this.map[this.idFunction(elt)] !== undefined) {
      throw 'Error: id "' + this.idFunction(elt) + '" already present in heap';
    }

    this.content.push(elt);
    this.bubbleUp(this.content.length - 1);
  },

  pop: function () {
    var result = this.content[0];
    var end = this.content.pop();
    if (result !== undefined) {
      delete this.map[this.idFunction(result)];
    }

    if (this.content.length > 0) {
      this.content[0] = end;
      this.map[this.idFunction(end)] = 0;
      this.sinkDown(0);
    }

    return result;
  },

  bubbleUp: function (n) {
    var element = this.content[n];
    var score = this.scoreFunction(element);

    while (n > 0) {
      var parentN = Math.floor((n - 1) / 2);
      var parent = this.content[parentN];

      if (this.scoreFunction(parent) < score) break;

      this.map[this.idFunction(element)] = parentN;
      this.map[this.idFunction(parent)] = n;

      this.content[parentN] = element;
      this.content[n] = parent;
      n = parentN;
    }

    this.map[this.idFunction(element)] = n;

    return n;
  },

  sinkDown: function (n) {
    var element = this.content[n];
    var score = this.scoreFunction(element);

    while (true) {
      var child2N = (n + 1) * 2;
      var child1N = child2N - 1;
      var swap = null;

      if (child1N < this.content.length) {
        var child1 = this.content[child1N];
        child1score = this.scoreFunction(child1);
        if (score > child1score) {
          swap = child1N;
        }
      }

      if (child2N < this.content.length) {
        var child2 = this.content[child2N];
        var child2score = this.scoreFunction(child2);
        if ((swap == null ? score : child1score) > child2score) {
          swap = child2N;
        }
      }

      if (swap == null) break;

      this.map[this.idFunction(element)] = swap;

      this.content[n] = this.content[swap];
      this.content[swap] = element;
      n = swap;
    }

    this.map[this.idFunction(element)] = n;

    return n;
  },

  decreaseKey: function (id, value) {
    var n = this.map[id];
    this.content[n][this.valueProp] = value;
    this.bubbleUp(n);
  },

  peak: function () {
    return this.content[0];
  },
};

/**
 * @param {number[]} servers
 * @param {number[]} tasks
 * @return {number[]}
 */
var assignTasks = function (servers, tasks) {
  // console.log('TCL ~ tasks', tasks.length);
  const queue = new BinaryHeap(
    (a) => +a.value * 2 * Math.pow(10, 5) + 1 + a.id,
    (a) => {
      return a.id;
    },
    'value'
  );
  const busy = new BinaryHeap(
    (a) => a.time,
    (a) => {
      return a.id;
    },
    'time'
  );
  for (let i = 0; i < servers.length; i++) {
    const s = servers[i];
    queue.push({
      value: s,
      id: i,
    });
  }
  let time = 0;
  let currTaskIndex = 0;
  const ans = [];
  while (currTaskIndex < tasks.length) {
    if (!queue.peak()) {
      time = busy.peak().time;
    }
    while (busy.peak() && busy.peak().time <= time) {
      const s = busy.pop();
      queue.push(s);
    }
    while (currTaskIndex <= time && currTaskIndex < tasks.length) {
      let s = queue.pop();
      if (s) {
        ans.push(s.id);
        s.time = time + tasks[currTaskIndex];
        busy.push(s);
        currTaskIndex++;
      } else {
        break;
      }
    }
    time++;
  }
  return ans;
};

console.log(assignTasks([3, 3, 2], [1, 2, 3, 2, 1, 2]));
console.log(assignTasks([5, 1, 4, 3, 2], [2, 1, 2, 4, 5, 2, 1]));
// prettier-ignore
console.log(JSON.stringify( assignTasks([338,890,301,532,284,930,426,616,919,267,571,140,716,859,980,469,628,490,195,664,925,652,503,301,917,563,82,947,910,451,366,190,253,516,503,721,889,964,506,914,986,718,520,328,341,765,922,139,911,578,86,435,824,321,942,215,147,985,619,865],
  [773,537,46,317,233,34,712,625,336,221,145,227,194,693,981,861,317,308,400,2,391,12,626,265,710,792,620,416,267,611,875,361,494,128,133,157,638,632,2,158,428,284,847,431,94,782,888,44,117,489,222,932,494,948,405,44,185,587,738,164,356,783,276,547,605,609,930,847,39,579,768,59,976,790,612,196,865,149,975,28,653,417,539,131,220,325,252,160,761,226,629,317,185,42,713,142,130,695,944,40,700,122,992,33,30,136,773,124,203,384,910,214,536,767,859,478,96,172,398,146,713,80,235,176,876,983,363,646,166,928,232,699,504,612,918,406,42,931,647,795,139,933,746,51,63,359,303,752,799,836,50,854,161,87,346,507,468,651,32,717,279,139,851,178,934,233,876,797,701,505,878,731,468,884,87,921,782,788,803,994,67,905,309,2,85,200,368,672,995,128,734,157,157,814,327,31,556,394,47,53,755,721,159,843])));

// prettier-ignore
console.log(assignTasks([908,103,17,374,839,318,208,50,697,393,315,799,208,675,499,120,625,997,992,115,189,324,150,331,31,284,587,593,570,512,45,794,452,185,954,474,872,534,16,189,331,844,756,661,72,455,882,2,927,918,289,19,766,732,887,368,998,100,51,653,372,284,97,396,137,535,197,549,132,640,932,636,306,134,578,66,789,493,931,337,626,118,623,762,42,305,997,592,34,297,812,698,62,416,522,713,352,139,644,877,190,151,165,290,757,697,224,191,906,390,158,497,422,491,100,629,782,901,567,88,571,145,308,412,829,805,178,786,754,405,663,156,409,505,469,335,664,497,986,134,562,80,228,768,577,918,722,996,12,663,578,729,577,299,442,632,767,614,376,364,900,595,574,772,941,147,208,782,90,640,344,212,152,698,869,855,946,954,28,138,451,698,803,961,77,735,340,316,899,333,653,177,232,914,88,456,981,612,777,569,481,191,802,779,389,356,75,286,389,464,975,353,997,104,103,39,158,815,294,451,65,517,563,724,838,854,919,392,945,798,781,110,678,513,51,462,26,311,764,517,330,752,908,316,493,830,826,127,915,969,65,496,256,490,951,132,60,993,126,514,773,838,23,828,805,80,783,629,81,422,271,345,533,351,497,393,709,812,968,557,501,389,791,710,576,760,593,238,683,40,198,961,380,831,956,753,936,92,39,247,692,399,935,652,929,14,660,137,961,364,308,454,132,264,412,887,581,119,660,178,182,568,405,982,864,459,632,179,460,72,814,672,13,2,160,584,147,854,517,8,856,348,488,810,5,602,505,316,130,156,429,185,686,650,912,965,795,171,156,119,688,762,563,601,698,774,833,824,315,463,690,193,452,616,793,986,35,30,393,754,171,136,100,942,98,179,596,463,733,72,117,984,858,398,693,372,214,678,444,409,3,512,125,688,597,733,879,58,643,920,359,862,536,28,815,410,537,31,539,333,187,896,305,483,364,772,127,462,769,671,978,86,930],
  [567,66,79,965,224,834,143,80,21,846,986,565,610,962,946,829,127,319,436,648,732,117,125,504,80,725,801,323,328,414,557,739,958,828,509,695,502,555,101,706,154,35,479,587,811,799,804,959,728,439,644,542,106,54,159,42,956,866,490,251,237,191,313,705,490,11,572,476,118,787,185,101,551,788,536,558,594,867,114,313,154,758,579,235,655,387,339,398,570,166,660,361,200,737,513,675,59,148,920,774,746,105,947,267,646,196,472,174,744,891,796,269,59,470,385,936,317,893,13,130,188,918,14,862,567,714,654,843,570,417,109,585,259,715,395,850,326,913,543,254,713,377,483,469,947,772,67,100,352,187,35,725,855,664,771,158,52,441,343,432,732,398,772,1000,691,751,481,426,419,930,930,379,995,847,627,991,490,907,312,641,88,113,141,389,522,922,444,431,457,510,995,68,943,562,756,705,428,628,574,24,442,344,321,45,654,206,493,375,928,166,955,762,103,1000,265,365,25,990,412,73,839,737,563,399,673,423,409,27,200,203,976,358,244,350,897,92,196,542,599,272,374,598,892,887,549,687,551,904,50,334,448,603,207,119,689,346,426,781,761,580,822,347,166,521,959,905,574,966,699,362,23,745,392,359,736,137,969,277,842,834,177,963,606,811,871,702,801,389,485,923,459,846,32,609,747,981,607,767,831,240,904,702,334,534,74,603,228,684,718,427,567,457,690,563,359,233,131,703,20,342,74,863,141,808,428,83,622,552,214,9,698,445,214,399,140,648,121,257,692,304,713,541,790,310,604,449,948,248,905,680,441,863,132,528,108,576,109,318,50,469,340,139,971,194,528,808,107,396,717,511,627,246,920,469,959,579,932,336,478,164,566,17,852,131,160,387,66,917,376,593,31,934,598,283,448,998,293,513,252,212,725,868,246,720,922,259,180,502,698,438,463,728,810,219,487,54,106,816,924,287,201,184,757,897,601,258,620,124,701,777,688,28,568,561,766,900,432,476,244,101,256,549,375,246,265,898,13,764,399,428,434,603,269,69,710,674,759,42,374,450,926,720,235,595,297,606,362,666,313,745,571,57,366,242,757,512,287,908,316,323,238,454,955,980,889,490,67,515,672,134,757,466,563,243,944,130,315,722,790,157,474,941,950,957,783,31,831,353,763,250,823,782,766,844,637,16,811,907,363,233,60,425,814,159,508,37,805,739,743,12,249,461,143,571,39,833,467,393,232,416,81,136,831,450,937,322,262,353,931,85,701,995,215,360,675,335,886,579,745,64,215,798,851,802,401,500,151,293,163,17,377,304,640,663,217,771,546,471,430,809,747,983,150,525,639,225,325,24,471,195,216,601,754,330,357,379,961,309,811,156,650,905,806,19,986,979,734,112,942,552,530,255,912,699,35,738,779,557,492,998,85,698,267,407,206,674,960,882,610,535,434,524,500,195,198,549,286,807,169,86,441,253,954,70,703,616,623,355,536,598,857,169,526,815,307,45,732,365,457,174,80,770,483,390,958,960,208,675,536,803,635,21,319,502,835,344,503,270,258,285,419,501,749,476,223,356,736,730,848,712,55,146,447,627,438,119,588,96,13,141,376,453,324,967,966,100]).length);
