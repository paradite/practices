// [001, 010, 011, 100, 101, 110, 111]
// 1      2    3   4    5    6    7
// [001, 110, 011, 100, 001, 110, 111]
//   1    6   3    4    1    6    7
// [001, 110, 001, 110, 001, 110, 111]
//   1    6   1    6    1    6    7

// [001, 010, 001, 100, 111, 110, 111]
// 1      2    1   4    7    6    7
// [001, 010, 001, 100, 111, 110, 111]
// 1      2    1   4    7    6    7

/**
 * @param {number} p
 * @return {number}
 */
var minNonZeroProduct = function (p) {
  const memo = {};
  const mod = BigInt(Math.pow(10, 9) + 7);
  const fastPow = (item, times) => {
    if (memo[times]) {
      return memo[times];
    }
    if (times <= 3) {
      return item ** times % mod;
    }
    const f = times / 2n;
    const s = times - f;
    const result = ((fastPow(item, f) % mod) * (fastPow(item, s) % mod)) % mod;
    if (result < 1000000000n) {
      memo[times] = result;
    }
    return result;
  };
  p = BigInt(p);
  let item = 2n ** p - 2n;
  let terms = (2n ** p - 2n) / 2n;
  let product = fastPow(item, terms);

  // console.log('TCL ~ memo', memo);
  return Number(((product % mod) * (BigInt(2n ** p - 1n) % mod)) % mod);
};

console.log(minNonZeroProduct(1));
console.log(minNonZeroProduct(2));
console.log(minNonZeroProduct(3));
console.log(minNonZeroProduct(4));
console.log(minNonZeroProduct(6)); // 57405498
console.log(minNonZeroProduct(19)); // 484576688
console.log(minNonZeroProduct(54)); // 247773741
// console.log(minNonZeroProduct(25));
// console.log(minNonZeroProduct(60));

//   '0001', '0010', '0011', '0100', '0101', '0110', '0111', '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'
//       1     2      3         4        5      6      7        8      9       10       11     12      13      14     15
//   '0001', '0110', '0011', '0100', '0001', '0110', '0111', '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'
//       1     6      3         4        1      6      7        8      9       10       11     12      13      14     15
//   '0001', '0110', '0001', '0110', '0001', '0110', '0111', '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'
//       1     6      1         6        1      6      7        8      9       10       11     12      13      14     15
//   '0001', '0110', '0001', '0110', '0001', '1110', '0111', '1100', '1001', '1010', '1011', '1100', '0001', '1110', '1111'
//       1     6      1         6        1      14      7      12      9       10       11     12      1       14     15
//   '0001', '1110', '0001', '0110', '0001', '1110', '0111', '1100', '1001', '1010', '0001', '1110', '0001', '1110', '1111'
//       1     14     1         6       1      14      7      12      9       10        1     14      1       14     15
//   '0001', '1110', '0001', '1110', '0001', '1110', '0111', '1100', '0001', '1010', '0001', '1110', '0001', '1110', '1111'
//       1     14     1        14       1      14      7      12      1       10        1     14      1       14     15
//   '0001', '1110', '0001', '1110', '0001', '1110', '0001', '1110', '0001', '1110', '0001', '1110', '0001', '1110', '1111'
//       1     14     1        14       1      14      1      14      1       14        1     14      1       14     15

// '0110'  '1001'  '1011'  '1100'
//   6        9       11      12  7128
// '1110'  '1011'  '0001'  '1100'
//   14       13      1      12  2184
// '1110'  '1001'  '1011'  '1110'
//   14        9      1      14  1764
